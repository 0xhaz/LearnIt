
generator client {
  provider = "prisma-client-js"  
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id String @id @default(uuid()) @map("_id")
  wallet String                 
  title String
  description String? 
  imageUrl String?
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]
  enrollments Enrollment[]
  purchases Purchase[]     
  lensPublication LensPublication[]
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid()) @map("_id")
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(uuid()) @map("_id")
  name String
  url String 

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Purchase {
  id        String   @id @default(uuid()) @map("_id")
  wallet    String                    
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@unique([wallet, courseId]) 
}



model Chapter {
  id String @id @default(uuid()) @map("_id")
  title String
  description String?
  videoUrl String?
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  lensPublication LensPublication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id String @id @default(uuid()) @map("_id")
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(uuid()) @map("_id")
  wallet String                   
  
  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([wallet, chapterId])
}

model Enrollment {
  id String @id @default(uuid()) @map("_id")
  wallet String                  // replaces userId
  
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  enrolledVia String?            
  txHash String?                 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  

  @@unique([wallet, courseId])
  @@index([courseId])
}

model User {
  wallet String @id @map("_id")

  name   String?
  email  String?
  role   String?  

  lensHandle String? @unique
  lensProfileId String? 

  createdAt DateTime @default(now())
}

model LensPublication {
  id String @id @default(uuid()) @map("_id")
  publicationId String @unique
  courseId String?
  chapterId String?
  type String
  createdBy String
  createdAt DateTime @default(now())

  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapter Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([chapterId])
}